/* Text to put at the beginning of the generated file. Testing */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

#define COMMIT_LEN 97

#define PROOF_LEN 97

#define RAW_PP_LEN 196625

#define VP_LEN 49737

typedef struct vcp_commitment {
  void *data;
} vcp_commitment;

/**
 * deserelized prover parameter struct
 */
typedef struct vcp_pp {
  void *data;
} vcp_pp;

typedef struct vcp_value {
  const uint8_t *data;
  size_t len;
} vcp_value;

typedef struct vcp_commitment_bytes {
  uint8_t data[COMMIT_LEN];
} vcp_commitment_bytes;

/**
 * deserelized verifier parameter struct
 */
typedef struct vcp_vp {
  void *data;
} vcp_vp;

typedef struct vcp_params {
  vcp_pp prover;
  vcp_vp verifier;
} vcp_params;

/**
 * serelized prover parameter struct
 */
typedef struct vcp_pp_bytes {
  uint8_t data[RAW_PP_LEN];
} vcp_pp_bytes;

typedef struct vcp_proof {
  void *data;
} vcp_proof;

typedef struct vcp_proof_bytes {
  uint8_t data[PROOF_LEN];
} vcp_proof_bytes;

/**
 * serelized verifer parameter struct
 */
typedef struct vcp_vp_bytes {
  uint8_t data[VP_LEN];
} vcp_vp_bytes;

/**
 * # Safety
 */
vcp_commitment vcp_commit(vcp_pp prover, const vcp_value *values, uintptr_t n);

/**
 * # Safety
 */
vcp_commitment vcp_commit_deserial(vcp_commitment_bytes commit);

vcp_commitment_bytes vcp_commit_serial(vcp_commitment commit);

/**
 * # Safety
 */
vcp_params vcp_paramgen(const uint8_t *seedbuf, size_t seedlen, uint8_t ciphersuite, size_t n);

/**
 * # Safety
 */
vcp_pp vcp_pp_deserial(vcp_pp_bytes pprover);

/**
 * # Safety
 */
vcp_pp_bytes vcp_pp_serial(vcp_pp pprover);

/**
 * # Safety
 */
vcp_proof vcp_proof_deserial(vcp_proof_bytes proof);

vcp_proof_bytes vcp_proof_serial(vcp_proof proof);

/**
 * # Safety
 */
vcp_proof vcp_prove(vcp_pp prover, const vcp_value *values, uintptr_t n, size_t idx);

/**
 * # Safety
 */
bool vcp_verify(vcp_vp verifier, vcp_commitment com, vcp_proof proof, vcp_value value, size_t idx);

/**
 * # Safety
 */
vcp_vp vcp_vp_deserial(vcp_vp_bytes pverifier);

vcp_vp_bytes vcp_vp_serial(vcp_vp pverifier);
